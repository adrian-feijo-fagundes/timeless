
## ‚úÖ **Principais Mudan√ßas:**

### ** Rotas Protegidas (com JWT):**
- `GET /user` - Listar usu√°rios
- `GET /user/:id` - Buscar usu√°rio
- `PUT /user/:id` - Atualizar usu√°rio  
- `DELETE /user/:id` - Deletar usu√°rio

### **üîì Rotas P√∫blicas (sem JWT):**
- `POST /user` - Registro
- `POST /user/login` - Login

### **üö® Novos Casos de Erro:**
- Token n√£o fornecido
- Token inv√°lido
- Token expirado
- Formato de token incorreto

### ** Fluxo de Uso:**
1. **Login** ‚Üí Obter token
2. **Copiar token** da resposta
3. **Usar token** em requisi√ß√µes protegidas

Agora voc√™ tem exemplos completos para testar tanto as rotas p√∫blicas quanto as protegidas! üéØ

## ‚úÖ **Casos de Erro Cobe

# ========== REQUISI√á√ïES P√öBLICAS (SEM JWT) ==========
###

# Criar um usu√°rio (POST) - Registro
POST http://localhost:3000/user
Content-Type: application/json

{
    "email": "pedro@test.com",
    "name": "Pedro Silva",
    "password": "123456",
    "phone": "11999999999",
    "gender": "male",
    "birthday": "1990-06-12T10:00:00.000Z"
}

###

# Login (POST) - Obter token
POST http://localhost:3000/user/login
Content-Type: application/json

{
    "email": "pedro@test.com",
    "password": "123456"
}

###

# ========== REQUISI√á√ïES PROTEGIDAS (COM JWT) ==========

# Listar todos os usu√°rios (GET) - COM TOKEN
GET http://localhost:3000/user
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjMsImVtYWlsIjoicGVkcm9AdGVzdC5jb20iLCJpYXQiOjE3NTY3Njk0NTMsImV4cCI6MTc1Njc3MzA1M30.slUcMr6pczAjcp9VQHHah9g06VejsD1yT2VvIIbphfI

###

# Buscar usu√°rio por ID (GET) - COM TOKEN
GET http://localhost:3000/user/1
Authorization: Bearer SEU_TOKEN_AQUI

###

# Atualizar usu√°rio com id 1 (PUT) - COM TOKEN
PUT http://localhost:3000/user/1
Content-Type: application/json
Authorization: Bearer SEU_TOKEN_AQUI

{
    "name": "Pedro Silva Santos",
    "phone": "11888888888",
    "gender": "male",
    "birthday": "1990-06-12T10:00:00.000Z"
}

###

# Deletar usu√°rio com id 1 (DELETE) - COM TOKEN
DELETE http://localhost:3000/user/1
Authorization: Bearer SEU_TOKEN_AQUI

###

# ========== CASOS DE ERRO - AUTENTICA√á√ÉO ==========

# Erro: Token n√£o fornecido
GET http://localhost:3000/user

###

# Erro: Token inv√°lido
GET http://localhost:3000/user
Authorization: Bearer token_invalido

###

# Erro: Token expirado
GET http://localhost:3000/user
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsImVtYWlsIjoicGVkcm9AdGVzdC5jb20iLCJpYXQiOjE2MzQ1Njc4OTksImV4cCI6MTYzNDU3MTQ5OX0.token_expirado

###

# Erro: Formato de token incorreto
GET http://localhost:3000/user
Authorization: SEU_TOKEN_AQUI

###

# ========== CASOS DE ERRO - CRIA√á√ÉO DE USU√ÅRIO ==========

# Erro: Campos obrigat√≥rios faltando
POST http://localhost:3000/user
Content-Type: application/json

{
    "email": "teste@test.com",
    "name": "Teste"
    // Faltando: password, birthday
}

###

# Erro: Email inv√°lido
POST http://localhost:3000/user
Content-Type: application/json

{
    "email": "email-invalido",
    "name": "Teste",
    "password": "123456",
    "birthday": "1990-06-12T10:00:00.000Z"
}

###

# Erro: Email j√° existe
POST http://localhost:3000/user
Content-Type: application/json

{
    "email": "pedro@test.com",
    "name": "Outro Usu√°rio",
    "password": "123456",
    "birthday": "1990-06-12T10:00:00.000Z"
}

###

# ========== CASOS DE ERRO - LOGIN ==========

# Erro: Email e senha obrigat√≥rios
POST http://localhost:3000/user/login
Content-Type: application/json

{
    "email": "teste@test.com"
    // Faltando: password
}

###

# Erro: Usu√°rio n√£o encontrado
POST http://localhost:3000/user/login
Content-Type: application/json

{
    "email": "naoexiste@test.com",
    "password": "123456"
}

###

# Erro: Senha inv√°lida
POST http://localhost:3000/user/login
Content-Type: application/json

{
    "email": "pedro@test.com",
    "password": "senhaerrada"
}

###

# ========== CASOS DE ERRO - OPERA√á√ïES PROTEGIDAS ==========

# Erro: ID inv√°lido (n√£o num√©rico) - COM TOKEN
GET http://localhost:3000/user/abc
Authorization: Bearer SEU_TOKEN_AQUI

###

# Erro: Usu√°rio n√£o encontrado - COM TOKEN
GET http://localhost:3000/user/99999
Authorization: Bearer SEU_TOKEN_AQUI

###

# Erro: ID inv√°lido na atualiza√ß√£o - COM TOKEN
PUT http://localhost:3000/user/abc
Content-Type: application/json
Authorization: Bearer SEU_TOKEN_AQUI

{
    "name": "Novo Nome"
}

###

# Erro: Usu√°rio n√£o encontrado na atualiza√ß√£o - COM TOKEN
PUT http://localhost:3000/user/99999
Content-Type: application/json
Authorization: Bearer SEU_TOKEN_AQUI

{
    "name": "Novo Nome"
}

###

# Erro: Email j√° existe (outro usu√°rio) - COM TOKEN
PUT http://localhost:3000/user/1
Content-Type: application/json
Authorization: Bearer SEU_TOKEN_AQUI

{
    "email": "outro@test.com"
}

###

# Erro: ID inv√°lido na exclus√£o - COM TOKEN
DELETE http://localhost:3000/user/abc
Authorization: Bearer SEU_TOKEN_AQUI

###

# Erro: Usu√°rio n√£o encontrado na exclus√£o - COM TOKEN
DELETE http://localhost:3000/user/99999
Authorization: Bearer SEU_TOKEN_AQUI

###

# ========== TESTES DE VALIDA√á√ÉO ==========

# Teste: Nome vazio
POST http://localhost:3000/user
Content-Type: application/json

{
    "email": "teste@test.com",
    "name": "",
    "password": "123456",
    "birthday": "1990-06-12T10:00:00.000Z"
}

###

# Teste: Senha vazia
POST http://localhost:3000/user
Content-Type: application/json

{
    "email": "teste@test.com",
    "name": "Teste",
    "password": "",
    "birthday": "1990-06-12T10:00:00.000Z"
}

###

# Teste: Data de nascimento inv√°lida
POST http://localhost:3000/user
Content-Type: application/json

{
    "email": "teste@test.com",
    "name": "Teste",
    "password": "123456",
    "birthday": "data-invalida"
}

###

# Teste: G√™nero inv√°lido
POST http://localhost:3000/user
Content-Type: application/json

{
    "email": "teste@test.com",
    "name": "Teste",
    "password": "123456",
    "birthday": "1990-06-12T10:00:00.000Z",
    "gender": "invalido"
}

###

# ========== EXEMPLO DE FLUXO COMPLETO ==========

# 1. Primeiro, fa√ßa login para obter o token
POST http://localhost:3000/user/login
Content-Type: application/json

{
    "email": "pedro@test.com",
    "password": "123456"
}

# 2. Copie o token da resposta e use nas requisi√ß√µes protegidas
# Exemplo de resposta do login:
# {
#   "message": "Login realizado com sucesso",
#   "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
#   "user": { ... }
# }

# 3. Use o token em requisi√ß√µes protegidas
GET http://localhost:3000/user
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

###

# ========== NOTAS IMPORTANTES ==========
# 
# 1. Substitua "SEU_TOKEN_AQUI" pelo token real obtido no login
# 2. O token expira em 1 hora (configurado no auth.ts)
# 3. Use o formato: Authorization: Bearer <token>
# 4. Rotas p√∫blicas: POST /user (registro) e POST /user/login
# 5. Rotas protegidas: GET, PUT, DELETE /user e /user/:id
#
